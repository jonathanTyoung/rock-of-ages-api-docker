name: Deploy to EC2

on:
  workflow_dispatch:  # Manual only

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.OIDC_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Trigger remote deployment on EC2 via SSM
        run: |
          # Clean any accidental whitespace/newlines in secrets
          ECR_REGISTRY=$(echo "${{ secrets.ECR_REGISTRY }}" | tr -d '\n' | tr -d '\r' | xargs)
          ECR_REPOSITORY=$(echo "${{ secrets.ECR_REPOSITORY }}" | tr -d '\n' | tr -d '\r' | xargs)
          AWS_REGION=$(echo "${{ secrets.AWS_REGION }}" | tr -d '\n' | tr -d '\r' | xargs)

          IMAGE="${ECR_REGISTRY}/${ECR_REPOSITORY}:latest"

          echo "Deploying image: $IMAGE"

          aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Manual deploy from GitHub Actions" \
            --parameters 'commands=[
              "set -e",
              "echo Deploying $IMAGE ...",
              "aws ecr get-login-password --region '"$AWS_REGION"' | docker login --username AWS --password-stdin '"$ECR_REGISTRY"'",
              "docker pull '"$IMAGE"'",
              "docker stop rock-of-ages-api-docker || true",
              "docker rm rock-of-ages-api-docker || true",
              "docker run --pull always -d --name rock-of-ages-api-docker -p 80:8000 '"$IMAGE"'",
              "docker system prune -af || true",
              "echo Deployment complete."
            ]' \
            --region "$AWS_REGION"
